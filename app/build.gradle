import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'kotlin-kapt'

apply plugin: 'io.fabric'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.us.telemedicine"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {

        release {
            buildConfigField("String", "BASE_URL", "\"https://base.azurewebsites.net/\"")
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // enable Crashlytics when Release mode
            manifestPlaceholders = [enableCrashReporting: "true"]
        }

        qa {
            initWith debug
            buildConfigField("String", "BASE_URL", "\"https://base.azurewebsites.net/\"")
            minifyEnabled true
            shrinkResources true
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // enable/disable Crashlytics when Debug mode
            manifestPlaceholders = [enableCrashReporting: "true"]
        }

        debug {
            //buildConfigField("String", "BASE_URL", "\"https://base.azurewebsites.net/\"")
            buildConfigField("String", "BASE_URL", "\"http://10.0.2.2:3000/\"")
            //for Android emulator access localhost
            minifyEnabled false
            shrinkResources false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // enable/disable Crashlytics when Debug mode
            manifestPlaceholders = [enableCrashReporting: "false"]
        }

        android.applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def file = output.outputFile
                def date = new Date();
                def formattedDate = date.format("dd.MM.yy-HH.mm")
                outputFileName = file.name.replace(".apk", "-" + formattedDate + ".apk")
            }
        }
    }

//    dataBinding {
//        enabled = true
//    }

    viewBinding {
        enabled = true
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'junit:junit:4.13'
    implementation 'androidx.test:runner:1.2.0'
    implementation 'androidx.test.espresso:espresso-core:3.2.0'

    // App dependencies
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    // platform
    implementation "androidx.legacy:legacy-support-v4:$androidXLegacySupport"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.annotation:annotation:$androidXAnnotations"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayoutVersion"
    implementation "androidx.fragment:fragment-ktx:$fragmentKtxVersion"

    // KTX core
    //implementation 'androidx.core:core-ktx:1.1.0'

    // Architecture Components
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$archLifecycleVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"

    // Dagger
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerAndroidVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerAndroidVersion"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    // retrofit + okhttp
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofit2Version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2Version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp3Version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3Version"

    // Firebase SDK for Google Analytics
    implementation "com.google.firebase:firebase-analytics:$firebaseVersion"
    // Crashlytics  dependency
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion"

    // Runtime permissions
    implementation "pub.devrel:easypermissions:$easypermissionsVersion"

    // Timber logging
    implementation "com.jakewharton.timber:timber:$timberVersion"

    // Location
    implementation "com.google.android.gms:play-services-location:$locationVersion"

    // decode JWT tokens
    implementation "com.auth0.android:jwtdecode:$jwtdecodeVersion"
}

apply plugin: 'com.google.gms.google-services'
